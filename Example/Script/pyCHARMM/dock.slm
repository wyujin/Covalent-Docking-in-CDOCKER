#!/bin/bash

#Created by Yujin Wu (wyujin@umich.edu)
#at 2020/04/10

#SBATCH -A brooks
#SBATCH -p gpu 
#SBATCH --job-name=cov-dock
#SBATCH --time=5:00:00
#SBATCH --gres=gpu:1
#SBATCH --ntasks=1
#SBATCH --nodes=1
#SBATCH --array=1-3%1
#SBATCH --output=slurm.out

############################################################################################
## Prepare environment 
############################################################################################

## Module load in satyr
module load environments/gcc_7.3.0
module load openbabel/2.4.1
module load mmtsb/mmtsb
module load anaconda/3.5.3.0
export charmm=/home/wyujin/CHARMM7/ocl-fftdock/install/test/bin/charmm
export CHARMM_LIB_DIR=/home/wyujin/CHARMM7/ocl-test/install/test/lib/
j=$[SLURM_ARRAY_TASK_ID]

if [ $j -eq 1 ]; then
	
	## Prepare scripts
	cp ../Script/pyCHARMM/grid.py ./
	cp ../Script/pyCHARMM/mini.inp ./
	cp ../Script/pyCHARMM/standard.py ./ 
	cp ../Script/Conformer_generation/rename.sh ./
	cp ../Script/Conformer_generation/prepare.sh ./
	cp ../Script/Conformer_generation/property.py ./ 

	## Prepare folder
	rm -f *dat grid-emax* [0-9]* output* 
	rm -rf dock_result
	mkdir -p dock_result

	## Generate grids 
	python grid.py

	fi

## Prepare ligand files
pdbID=`head -n $j list | tail -n 1`
cp ../str/${pdbID}.str ./ligandrtf
cp ../pdb/${pdbID}.pdb ./ligand.pdb
cp ../mol2/${pdbID}.mol2 ./ligand.mol2

############################################################################################
## Docking with different grids 
## 	num = 100
## 	copy = 10
##	100 different covalent potential grids 
############################################################################################

## Generate ligand random conformer
cp ../Script/Conformer_generation/conformer.py ./ 
cp ../Script/Conformer_generation/conformer.csv ./ 
bash prepare.sh
mv conformer.dat result/ligand_internal
rm ligand.mol2 ligand.mol tmp*

## Running docking 
python standard.py
mv dockresult dock_result/${j}
rm output* tmp* ligand.pdb ligandrtf [0-9]*
rm -r conformer conformer.py conformer.csv

if [ $j -eq 3 ]; then
	rm -rf [0-9]* grid.py standard.py conformer.csv conformer.py.original ligand.crd mini.crd property.py conformer.crd prepare.sh rename.sh mini.inp optimized *.dat grid-emax* 
	fi
